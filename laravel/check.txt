public function getCategoryTasks($category_id){
    $user_id = Auth::user()->id;
    $category = Category::findOrFail($category_id);
    $tasks = $category->tasks;

    // Filter tasks to check if the authenticated user owns them
    $tasks = $tasks->filter(function($task) use ($user_id) {
        return $task->user_id == $user_id;
    });

    // If no tasks are found for this user, return Unauthorized
    if ($tasks->isEmpty()) {
        return response()->json(['message' => 'Unauthorized'], 403);
    }

    return response()->json($tasks, 200);
}

public function getTaskCategories($task_id){
    $user_id = Auth::user()->id;
    $task = Task::findOrFail($task_id);

    // Check if the authenticated user owns the task
    if ($task->user_id != $user_id) {
        return response()->json(['message' => 'Unauthorized'], 403);
    }

    $categories = $task->categories;
    return response()->json($categories, 200);
}

public function addCategoriesToTask(Request $request, $task_id){
    $user_id = Auth::user()->id;
    $task = Task::findOrFail($task_id);

    // Check if the authenticated user owns the task
    if ($task->user_id != $user_id) {
        return response()->json(['message' => 'Unauthorized'], 403);
    }

    // Validate if the category_id is provided and is valid
    $request->validate([
        'category_id' => 'required|exists:categories,id',  // Ensure category_id exists in the categories table
    ]);

    // Attach the category to the task
    $task->categories()->attach($request->category_id);
    
    return response()->json('Category attached successfully', 200);
}
