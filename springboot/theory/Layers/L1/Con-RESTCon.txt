{Controller Layer(Request)}
*Controller is used to define a standard Spring MVC to render views in web applications, Methods in a @Controller return view names, which are resolved by a ViewResolver to render an HTML Page, for returning data you need to annotate methods with @ResponseBody

@Controller //MVC controller to handle web requests
public class myController {
	
	@GetMapping("/hello") //maps http GET request to the /hello page on web
	public String sayHello(Model model) {
		/*
			Adds an attribute "message" with the value "Hello" to the Model
			This data will be accessible in the view
		*/
		model.addAttribute("message", "Hello");
		return "hello"; //returns the name of the view
	}

	@GetMapping("/api/data") //Maps http GET requests for "/api/data" page on web
	@ResponseBody //Indicates that the return value should be written directly to the HTTP response
	public String getData() {
		//Returns plain text or JSON as the response body as string
		return "Data as plain text or JSON";
	}
}

*RESTController is used to define RESTful web service controller, it combines @Controller and @ResponseBody returning data (XML, JSON, ...) directly instead of view and simplifies the development of REST APIs by removing the need for @ResponseBody on each method

RESTController = Controller + ReponseBody
Example:
@RestController
public class myController {
	
	@GetMapping("/api/greeting")
	public String getGreeting() {
		return "Hello, with RESTful";
	}
}

*Key Differences
			 ________________________________________________
			|			|			 |
			|	@Controller     |    @RESTController     |
________________________|_______________________|________________________|
 			|			|			 |
View Rendering		|  Returns view names   |  Returns data directly |
			|	  {Yes}		|	  {No}           |
________________________|_______________________|________________________|
			|			|			 |
Default Response Type   |  View(except annoted  |    JSON or XML (data,  |
			|   with @ResponseBody) |      not views)        |
________________________|_______________________|________________________|
			|			|			 |
Primary Use Case	| Traditional web apps  |   REST APIs and web    |
			|       with views      |        services        |
________________________|_______________________|________________________|
			|			|			 |
Annotation		|Requires @ResponseBody |	    -		 |
			| for data responses.	|	    		 |
________________________|_______________________|________________________|


USAGE:
.If application serves HTML pages abd building a web application with a front-end templating engine ====> @Controller
.If application provides RESTful API and need to expose JSON or XML endpoints for clients consumption ====> @RestController
