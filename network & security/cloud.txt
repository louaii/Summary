Services provided from external network as Servers and endpoints and provided on-demand and at scale in a multitenant environment.
_"On-demand" means that resources can be provisioned immediately when needed, released when no longer required, and billed only when used
_"At-scale" means the service provides the illusion of infinite resource availability in order to meet whatever demands are made of it.
_"Multitenant environment" means that the resources are provided to many consumers from a single implementation, saving the provider significant costs.

Cloud Deployment modes:
_Private Cloud
_Public Cloud
_Hybrid Cloud(Virtual Private)

Private Cloud: Could be argued to be the most secure model as all resources(Compute, Network, Storage) remain entirely under the administrative control of the single company, this doesn't address concerns of remote access for vpn, web and app access. This model is like on-premises DC except it must supply the three key ingredients identified by cisco to be considered a "private cloud - automation/orchestration, workload mobility, and compartmentalization"

Public cloud: Offers their customers very high levels of security from Storage encryption to protect private data, to Encrypted VPN to protect data in motion, customer pays a subscription fee for a given amount of compute/storage, time, data transferred, or any other metric that meaningfully represents the customer's use of the cloud provider's shared infrastructure.It reduces CAPEX since purchasing new DC equipment is unnecessary and reduces OPEX since the cost of maintaining an on-premise DC, along with trained staff, could be more expensive than a public cloud solution

Hybrid cloud:is a combination of private and public cloud, an organization may decide to use this to offload some of its DC resources into the public cloud, while retaining some things in-house, this allows a business to objectively assess whether the cloud is the "right business decision", it reduces OPEX to an extent, since the cost of maintaining an on-premise DC, along with trained staff can be reduced.

Service layers of cloud computing:
XaaS: X as a Service(Database, vm, ...)
IaaS: Infrastructure as a Service
Delivered Service ==> OS, virtualization, servers, storage, networking
PaaS: Platform as a Service ==> runtime, middleware, OS, virtualization, servers, storage, networking
SaaS: Software as a Service ==> Applications, Data, Runtime, Middleware, OS, Virtualization, Servers, Storage, Networking

Advantages of cloud computing:

_Performance and reliability: Acceptable and consistent end-user experience irrespective of location and device type, most reputable providers will have plenty of compute, network, and storage performance as well as many levels of reliability.

_Automation

_Security and Privacy: Consistent security enforcement of enterprise security policies across multiple cloud services.

_Scalability and Interoperability: Rapid elasticity

_Workload migration

How cutomers connect to the cloud:
_Private WAn
_Internet Exchange Point
_Internet VPN

Compute Virtualization, hyper-convergence and disaggregation:
_Containers(Docker, linux containers[LXC])
_Virtual Machines
_Hyper-Convergence
_Disaggregation

Connectivity in virtualized networks: 
_Ethernet VLAN's using 802.1q encapsulation
_VRF
_MPLS VPN's
_Virtual Extensible Area Network(VXLAN)
_NVGRE
_OTV

Virtual Switches:

_Types:
Standlone/Basic
Distributed
Vender-specific software

Software-Defined Wide Area Network:
it has four main components:
_vSmart Controller
_vEdge
_vManage
_vBond

Software-Denied Access:

_Cisco's SDA architecture is a holistic, intent-based networking solution designed for enterprises to operate, maintain, and secure their access layer networks.

_Campus fabric is one of the core components of this design.

_Cisco's campus fabric is a main component of the digital network architecture(DNA), a major Cisco networking initiative.

Software-Denied data center:

_SD-DC as a generic term describes a data center design model whereby all DC resources are virtualized and on-demand

_SD-DC brings cloud-like provisioning of all DC resources (compute, network and storage) to support specific applications in automated fashion.

Application centric infrastructure(ACI) is built on a leaf/spine network fabric which has a number of interesting characteristics:

_Adding bandwidth is achieved by adding spines and linking the leaves to it.

_Adding access density is achieved by adding leaves and linking them to the spines.

_Border leaves are identified as the egress point from the fabric, not the spines

_Nothing connects to the spines other than leaves, and spines are never connected laterally.

Network Function Virtualization(NVF):

_NVF is generally synonymous with creating virtual instances of things which were once physical.
_Many vendors offer virtual routers (Cisco CSR1000v, Cisco IOS-XR9000v, etc), security appliances (Cisco ASAv, Cisco NGIPSv, etc), telephony and collaboration components (Cisco UCM, CUC, IM&P, UCCX,etc) and many other virtual products that were once physical appliances.
_NFV provides abstraction at the first four layers of the OSI model, starting from the bottom layers: Physical ==> Data link ==> Network ==> Transport

Virtualization Functions:

_Application Function Virtualization(AFV): taking the functionality of an application, that would normally be implemented in a single device, and spreading it across multiple devices for more accurate results.

Automation and Orchestration tools:

_Automation refers to completing a single task, such as deploying virtual machine, shutting down an interface, or generating a report
_Orchestration refers to assembling/coordinating a process/workflow, which is effectively an ordered set of tasks glued together with conditions.
_Example of automation and orchestration:
Deploy this virtual machine, and if it fails shutdown this interface and generate a report.
_Programming or scripting languages used to automate: Java, C, Python, Perl, Ruby

Software-Defined Networking(SDN): Move the intelligence of the network(control plane) from individual devices into a central device.

_Controller: the device/application providing this control:Network monitoring, configuration, troubleshooting and resolution, software updates and policy application for data plane
_There are four main SDN models:Distributed, augmented, hybrid, centralized
_API(Application Program Interface)s used to facilitate communication
_Concept of an API id critical to understanding functionality of SDN.
_Defines how software components should interact with each other by using defined sets of protocols, routines and rules.
_To summarize, an API is just a piece of code that helps other pieces of code talk to each other.
_APIs as gRPC(google Remote Procedure Call), NetConf, RestConf, Rest API

Interfaces:
_Interface in context of SDN = communications channel between two devices.
_One-or-more protocols used to facilitate this interface
_SBI(Southbound interface): Communications to/from controller and infrastructure equipement.
_NBI(Northbound interface): communications to/from controller and upstream SDN-aware Applications.
_Interface Drivers & Agents:Agent represents the southern, bottom or infrastructure facing side, Driver represents the nothern, top or application facing side.

Southbound Interface protocols:
OpenFlow, NetConf, PCEP, BGP-LS, OVSDB(messages in these protocols carry API instructions to/from devices)

Data Modeling Languages: YANG, YAML, JSON, XML
Agent based: Puppet, chef
Agentless based: Ansible
Version control systems: git with github / git with aws / subVersion(SVN)

  


