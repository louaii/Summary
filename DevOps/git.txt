Git is a version control system that enables you to take snapshots of your project, track changes over time, and revert to previous commits when needed.

.Types of version control system: Centralized and Distributed
------------------------------------------------------------

***Centralized Version Control: used for personal as GitHub profile

			Main Server
			 ----------
			|          |
			|  Server  |
			|          |
			 ----------
                             commit
			/     /
		       /     /
		      /     /
		 update    /
		     -------	
	            |       |
		    | file  |
		    |	    |
		     -------


***Distributed Version Control: used for enterprises and companies as GitLab or GitHub branches for better performance between collaborators
			
				Main Server
				 ----------
				|          |
				|  Server  |
				|          |
				 ----------
			      Push         Push
			       /             \
			      /               \
			     /                 \
			    /                   \
			   /                     \
			 Pull                   Pull
                         /                         \
                        /                           \
              ----------------                  ----------------
             |                |                |                |
             |  Collaborator1 |                |  Collaborator2 |
             |                |                |                |
              ----------------                  ----------------
                 |      commit                     |      commit
		 |        |                        |         |
                 |        |                        |         |
                 |        |                        |         |
                update    |                       update     |
                 |        |                        |         |
                 |        |                        |         |
                 |        |                        |         |
               --------------                     --------------
              |              |                   |              |
              |    File C1   |                   |    File C2   |
              |              |                   |              |
               --------------                     --------------            


.Git Architecture
-----------------



 --------------------------------------------------------------------------------------
|                                          PC                                          |
|     ----------------              -----------------                    ------------- |
|    |                |            |                 |                  |             ||
|    |  Working       |    add     |   Staging       |      commit      | Local       ||
|    |       Directory| ---------  |         Area    | ---------------  |  repository ||
|    |                |            |                 |                  |             ||
|     ----------------              -----------------                    ------------- |
|           |                                                                  |       |
|           |                                                                  |       |
|           |                                                                  |       |
|            --------------------------Checkout--------------------------------        |
 --------------------------------------------------------------------------------------
                    Pull                                  |
                      |                                   |
                      |                                   |
                      |           -------------          Push
                      |          |             |          |
                       ----------|Remote       |----------
                                 |   repository|                                                                           
                                 |             |
                                  -------------





.Git Tree
---------
Commit 1:


                               master(branch)   
                                 /
                 -------------- /
git init        | commit 1 sha |  
                |     74f35    |
                 -------------- \
                                 \
                                HEAD(pointer)

Commit 2:

  
                                 
                 -------------- 
git init        | commit 1 sha |  
                |     74f35    |
                 -------------- 
                       |
                       |
                       |
                       |        master(branch)
git add .                        /
git commit       -------------- /
                | commit 2 sha |
                |    28er88    |
                | commit 2 tree|
                |     74f35    |
                 -------------- \
                                 \
                                HEAD(pointer)

Commit 3:

  
                                 
                 -------------- 
git init        | commit 1 sha |  
                |     74f35    |
                 -------------- 
                       |
                       |
                       |
                       |        
git add .              |          
git commit       -------------- 
                | commit 2 sha |
                |    28er88    |
                | commit 2 tree|
                |     74f35    |
                 -------------- 
                       |
                       |
                       |
                       |       master(branch)
git add .              |         /
git commit       -------------- /
                | commit 3 sha |
                |     71en6    |
                | commit 2 tree|
                |    28er88    |
                 -------------- \
                                 \
                                HEAD(pointer)

.Git configuration:
-------------------
git -v / git --version //to check version of installed git
git config --global user.name <username> //set username for git on device
git config --global user.email <email> //set email for git user on device
git config --global core.editor = <vim>(linux) / <notepad>(windows) //set the editor in case of errors and editing to open as vim using Linux or notepad using windows
git config --global --list //to chek the configuration made on device      


.Git SSH on GitHub:
-------------------
git remote add origin <server_name> //to connect working directory to the repository	
git remote set-url origin git@github.com:username/repository.git //to be able to push without entering your credentials



.Git init with new repository:
------------------------------
echo "# repo_name and description" >> README.md //add a file in the new repo
git init //initialize the git hidden folder in the local directory so you can push on remote repository
git add <file_name> //to add a desired folder only
git commit -m "<commit comment>" //to add a new commit to the repo as a checkpoint
git branch -M main //to name and set the current branch named as main
git remote add origin https://github.com/username/reponame.git //to be able to pull and push on the repo 
git push -u origin main //set the push on the branch main for the first time on main branch



.Git basics (add/rm/commit/diff):
---------------------------
git add . //add all the new folders in the working directory
git add <file_name> //to add a desired folder only
git status //check if the files are up to date or need to be added on the staging area or added to it from the working directory
git rm <file_name> //to remove a file from working directory and stage area, still needs a commit 
git rm -f <file_name> //to remove a file from the staging area before it's added to the local repo
git rm --cached <filename> //remove the added file from staging area to working directory
git rm --cached -r //remove all files from staging area to working directory
git restore --staged <file_name> //in case staging area has files commited to the local repository and a new file added to staging area that should not be commited to local repository, it reverts the new file back to working directory
git mv <existing_file_name> <new_file_name> //to rename a file - only commit is needed
git commit -m "message" //commit to add files to the local repository before pushing to remote repository
git commit -am "message" //commit to add files to staging area before pushing to remote repository
git commit --amend -m "commit new message" //to undo changes before pushing the new version on the local repository(commit)
git diff //shows the difference between an existing file modified between the working directory and staging area not added
git diff --staged //shows the difference between an existing file modified between the staging area and local repository not commited



.Git log:
---------
git log //to check if the HEAD is pointing to the last commit on working branch
git log --oneline //same as git log but summarized
git log --oneline --name-only //returns commits and the changes commited



.gitignore file:
----------------
gitignore file used to write the file_name or directory_name that has credentials and critical that won't be push in the remote repository
example in the .gitignore file a *.css this will ignore all the files with css extension which won't be pushed on the remote repository = no push no pull




.Git reset/checkout:
--------------------
		----------------		----------------		----------------		
               |                |              |                |              |                |                        (Master= commit 1 =HEAD) removed
               | Working        |              |  Staging       |              |  Local         |                         Master= commit 2 =HEAD               
               |    Directory   |              |         Area   |              |    Repository  |                                    |
               |                |              |                |              |                |                                    |
                ----------------                ----------------                ----------------                                     | 
                        |                              ||                              |                                             |
                        |            		       ||				--------------------------------------git reset --soft
                        |                              ||                                                                            |
			|			       ||									     |
              		|			       ||									     |
                        |                              | -------------------------------------------------------------------------git reset
                        |                               ----------------------------------------------------------------------git reset --mixed
                        |                                                                                                      	     |
			|													     |
			|													     |
			|													     |
			 -----------------------------------------------------------------------------------------------------git reset --hard

To revert to a previous commit dropping all above it moving the HEAD pointer and keeping on the same branch
git reset <sha_commit> || git reset --mixed <sha_commit> //revert to the destinated commit changing the staging area (commit needed)
git reset --soft <sha_commit> //revert to the destinated commit changing in the local repository only
git reset --hard <sha_commit> //revert to the destinated commit in all areas(working directory - staging area - local repository)
git checkout <sha_commit><file_name> //copies the file as is from the destinated commit to the working directory
git checkout //undo changes in working directory before pushing
git checkout <file_name> || git restore --staged <file_name> //undo changes in staging area before pushing
git checkout <sha_commit> //reverts all the files to the commit with the sha number(git log --oneline)
git revert <sha_commit> //reverts all the files to the commit with the sha number



Notes:
------
^ means before or -1
which means HEAD^ is the commit before the current HEAD