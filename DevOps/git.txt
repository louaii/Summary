Git is a version control system that enables you to take snapshots of your project, track changes over time, and revert to previous commits when needed.

.Types of version control system: Centralized and Distributed
------------------------------------------------------------

***Centralized Version Control: used for personal as GitHub profile

			Main Server
			 ----------
			|          |
			|  Server  |
			|          |
			 ----------
                             commit
			/     /
		       /     /
		      /     /
		 update    /
		     -------	
	            |       |
		    | file  |
		    |	    |
		     -------


***Distributed Version Control: used for enterprises and companies as GitLab or GitHub branches for better performance between collaborators
			
				Main Server
				 ----------
				|          |
				|  Server  |
				|          |
				 ----------
			      Push         Push
			       /             \
			      /               \
			     /                 \
			    /                   \
			   /                     \
			 Pull                   Pull
                         /                         \
                        /                           \
              ----------------                  ----------------
             |                |                |                |
             |  Collaborator1 |                |  Collaborator2 |
             |                |                |                |
              ----------------                  ----------------
                 |      commit                     |      commit
		 |        |                        |         |
                 |        |                        |         |
                 |        |                        |         |
                update    |                       update     |
                 |        |                        |         |
                 |        |                        |         |
                 |        |                        |         |
               --------------                     --------------
              |              |                   |              |
              |    File C1   |                   |    File C2   |
              |              |                   |              |
               --------------                     --------------            


.Git Architecture
-----------------



 --------------------------------------------------------------------------------------
|                                          PC                                          |
|     ----------------              -----------------                    ------------- |
|    |                |            |                 |                  |             ||
|    |  Working       |    add     |   Staging       |      commit      | Local       ||
|    |       Directory| ---------  |         Area    | ---------------  |  repository ||
|    |                |            |                 |                  |             ||
|     ----------------              -----------------                    ------------- |
|           |                                                                  |       |
|           |                                                                  |       |
|           |                                                                  |       |
|            --------------------------Checkout--------------------------------        |
 --------------------------------------------------------------------------------------
                    Pull                                  |
                      |                                   |
                      |                                   |
                      |           -------------          Push
                      |          |             |          |
                       ----------|Remote       |----------
                                 |   repository|                                                                           
                                 |             |
                                  -------------





.Git Tree
---------
Commit 1:


                               master(branch)   
                                 /
                 -------------- /
git init        | commit 1 sha |  
                |     74f35    |
                 -------------- \
                                 \
                                HEAD(pointer)

Commit 2:

  
                                 
                 -------------- 
git init        | commit 1 sha |  
                |     74f35    |
                 -------------- 
                       |
                       |
                       |
                       |        master(branch)
git add .                        /
git commit       -------------- /
                | commit 2 sha |
                |    28er88    |
                | commit 2 tree|
                |     74f35    |
                 -------------- \
                                 \
                                HEAD(pointer)

Commit 3:

  
                                 
                 -------------- 
git init        | commit 1 sha |  
                |     74f35    |
                 -------------- 
                       |
                       |
                       |
                       |        
git add .              |          
git commit       -------------- 
                | commit 2 sha |
                |    28er88    |
                | commit 2 tree|
                |     74f35    |
                 -------------- 
                       |
                       |
                       |
                       |       master(branch)
git add .              |         /
git commit       -------------- /
                | commit 3 sha |
                |     71en6    |
                | commit 2 tree|
                |    28er88    |
                 -------------- \
                                 \
                                HEAD(pointer)

.Git configuration:
-------------------
git -v / git --version //to check version of installed git
git config --global user.name <username> //set username for git on device
git config --global user.email <email> //set email for git user on device
git config --global core.editor = <vim>(linux) / <notepad>(windows) //set the editor in case of errors and editing to open as vim using Linux or notepad using windows
git config --global --list //to chek the configuration made on device      


.Git SSH on GitHub:
-------------------
git remote add origin <server_name> //to connect working directory to the repository	
git remote set-url origin git@github.com:username/repository.git //to be able to push without entering your credentials



.Git init with new repository:
------------------------------
echo "# repo_name and description" >> README.md //add a file in the new repo
git init //initialize the git hidden folder in the local directory so you can push on remote repository
git add <file_name> //to add a desired folder only
git commit -m "<commit comment>" //to add a new commit to the repo as a checkpoint
git branch -M main //to name and set the current branch named as main
git remote add origin https://github.com/username/reponame.git //to be able to pull and push on the repo 
git push -u origin main //set the push on the branch main for the first time on main branch



.Git basics (add/rm/commit/diff):
---------------------------
git add . //add all the new folders in the working directory
git add <file_name> //to add a desired folder only
git status //check if the files are up to date or need to be added on the staging area or added to it from the working directory
git rm <file_name> //to remove a file from working directory and stage area, still needs a commit 
git rm -f <file_name> //to remove a file from the staging area before it's added to the local repo
git rm --cached <filename> //remove the added file from staging area to working directory
git rm --cached -r //remove all files from staging area to working directory
git restore --staged <file_name> //in case staging area has files commited to the local repository and a new file added to staging area that should not be commited to local repository, it reverts the new file back to working directory
git mv <existing_file_name> <new_file_name> //to rename a file - only commit is needed
git commit -m "message" //commit to add files to the local repository before pushing to remote repository
git commit -am "message" //commit to add files to staging area before pushing to remote repository
git commit --amend -m "commit new message" //to undo changes before pushing the new version on the local repository(commit)
git diff //shows the difference between an existing file modified between the working directory and staging area not added
git diff --staged //shows the difference between an existing file modified between the staging area and local repository not commited
git diff <sha_commit><file_name> //to check the differences between a single file from different commits(local commit and chosen commit)
git diff <sha_commit> //check differences between the current state and a chosen commit of all files
git diff --name-only <sha_commit> //see files that changed between the current state and a chosen commit
git diff <sha_commit1>..<sha_commit2> //see the differences between the 2 chosen commits
git diff --name-only <sha_commit1>..<sha_commit2> //see files that changed between 2 chosen commits 
git diff <sha_commit>..HEAD //see differences between chosen commit and the commit with the HEAD pointer (usually last push except HEAD pointing to other commit manually)
git switch - //In case head deattached from branch, this command returns the head and branch on same commit
git show <sha_commit> //gives details about the chosen commit




.Git log:
---------
git log //to check if the HEAD is pointing to the last commit on working branch
git log --oneline //same as git log but summarized
git log --oneline --name-only //returns commits and the changes commited
git log --online -number //return number of commits given if 2 last commits shown if 3 last 3 commits 
git log --since="year-month-day" //return logs starting from that date
git log --until="year-month-day" //return logs till that date
git log --author="username" //return logs from a certain username
git log --stat //differences between commits in logs
git log <sha_commit1>..<sha_commit2> //details between chosen logs
git log --graph --all --oneline --decorate //logs between all branches
git log --pretty=format'...' //customized logs check this link ==> https://git-scm.com/docs/git-log 
git log --oneline --decorate --all --graph //to check all the commits on different branches seperately



.gitignore file:
----------------
gitignore file used to write the file_name or directory_name that has credentials and critical that won't be push in the remote repository
example in the .gitignore file a *.css this will ignore all the files with css extension which won't be pushed on the remote repository = no push no pull




.Git reset/checkout:
--------------------
		----------------		----------------		----------------		
               |                |              |                |              |                |                        (Master= commit 1 =HEAD) removed
               | Working        |              |  Staging       |              |  Local         |                         Master= commit 2 =HEAD               
               |    Directory   |              |         Area   |              |    Repository  |                                    |
               |                |              |                |              |                |                                    |
                ----------------                ----------------                ----------------                                     | 
                        |                              ||                              |                                             |
                        |            		       ||				--------------------------------------git reset --soft
                        |                              ||                                                                            |
			|			       ||									     |
              		|			       ||									     |
                        |                              | -------------------------------------------------------------------------git reset
                        |                               ----------------------------------------------------------------------git reset --mixed
                        |                                                                                                      	     |
			|													     |
			|													     |
			|													     |
			 -----------------------------------------------------------------------------------------------------git reset --hard

To revert to a previous commit dropping all above it moving the HEAD pointer and keeping on the same branch
git reset <sha_commit> || git reset --mixed <sha_commit> //revert to the destinated commit changing the staging area (commit needed)
git reset --soft <sha_commit> //revert to the destinated commit changing in the local repository only
git reset --hard <sha_commit> //revert to the destinated commit in all areas(working directory - staging area - local repository)
git checkout <sha_commit><file_name> //copies the file as is from the destinated commit to the working directory
git checkout //undo changes in working directory before pushing
git checkout <file_name> || git restore --staged <file_name> //undo changes in staging area before pushing
git checkout <sha_commit> //reverts all the files to the commit with the sha number(git log --oneline)
git revert <sha_commit> //reverts all the files to the commit with the sha number



.Git Stash:
-----------
git stash //in case a change is done on the working directory to a file and urgent update is needed without the new version stash takes the HEAD commit and pastes it to working directory and staging area hiding the changes in a stash list
git stash list //to see stashes
git stash pop //to get the last stash to working directory
git stash drop <stash_name> // to delete a stash
git stash show <stash_name> //to see changes in the chosen stash from the working directory
git stash save "message to add on stash list" //to add a stash with custom message
git stash pop <stash_name> //to get the chosen stash on working directory



.Git Branch:
------------
git branch //to see branches of the project and the one pointed
git branch <branch_name> //to create a new branch
git checkout <branch_name> //to switch from branch to another
git switch <branch_name> //to switch between two existing branches
git log --online --all //to see logs of all branches
git branch -D <branch_name> //to delete a branch (change HEAD pointer to another branch before deleting)
git checkout -b <branch_name> // create a new branch switching HEAD pointer to it
git checkout <sha_commit> //to create a new branch from a past commit, this way the HEAD de-attaches from the last commit and back to the chosen one creating a new branch from it
git diff <branch1>..<branch2> // to check differences between 2 branches last commit and working directory between them



.Git Merge:
-----------
Two types of merges: fast forward and recursive(sometimes causes conflicts)
_Fast Forward: moves the HEAD indicator to other branch last state which makes them one branch without going through commit order or timestamps
_Recursive: used when a new branch is created after it going back to old branch and committing changes(changes on both branches) this way the recursive merge looks for commits and timestamps
!!The type of merge can be chosen manually in cases depending on dev also Git can chose it automatically for the case needs

**git checkout <main_branch>
git merge <second branch>
//to merge changes from the second to main
!!In case second branch is deleted after merge no revert will be made on main branch or files

After conflict: files not in staging area =>> (git add ./git commit -m "message" || git commit -am "message")

git merge --no-ff <second_branch> //to manually choose recursive merge over fast forward


.Git Tag:
---------
tagging a commit makes it easier for reverting and keeping it as a checkpoint

git tag <tag_name> //to create a tag
git tag -l //to list all tags
git tag -a <tag_name> <sha_commit> -m "message" //to create a custom noted tag from the chosen commit
git show <tag_name> //to get tag details
git tag -d <tag_name> //to delete a tag
git checkout -b <branch_name> <tag_name> //to revert changes on working directory as the tagged commit chosen in a new branch


.Git Rebase:
------------
rebase is used on secondary branches

		----------      ----------      ----------                                   ----------
	master-|          | -- |          | -- |          |-                               -|new commit|
                ----------      ----------      ----------                                   ----------
						                ----------      ----------
							second-|    A     | -- |     B    |
                                                                ----------      ----------
using merge:
                                                     
		----------      ----------      ----------               -------      -------     ----------                  
	master-|          | -- |          | -- |          |-- second -- |   A   | -- |   B   | --|new commit|-on master
                ----------      ----------      ----------               -------      -------     ----------

using rebase:
		----------      ----------      ----------      ----------      ----------      ----------
	master-|          | -- |          | -- |          | -- |new commit| -- |    A     | -- |     B    |
                ----------      ----------      ----------      ----------      ----------      ----------

rebase is used to make changes on master branch by copying secondary branch state as is to master
rebase is followed by merge to avoid conflicts from recursive merge

git rebase <main_branch>
git checkout master
git merge <secondary_branch>


.Git Squash:
------------
squash is returning multiple commits into one single commit in logs using rebase interactive

git rebase -i <sha_commit1>..<sha_commit2> //merging commits into one single commit in logs
change commit name by commenting in editor the last commits and changing the first one



Notes:
------
^ means before or -1
which means HEAD^ is the commit before the current HEAD

push pull conflict:
git pull origin <branch_name> --> add commit merging --> git push 
