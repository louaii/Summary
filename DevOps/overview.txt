DevOps allows a single team to manage the entire application development life cycle(development, testing, deployment, monitoring).
DevOps merges the developers and operations roles:
Developer: create, plan, package, verify
Operations: release, configure, monitor

Traditional software development:
Plan, Create, Test, Deploy and the 2 methodologies Waterfall and Agile.
Waterfall Model: is a traditional software development model that uses a linear and sequential approach for software development.It's named waterfall because it progresses gradually from one step to the next in a downward direction.

_Waterfall stages:
1.requirement analysis: collect and analysse requirement from various stakeholders.
2.System design: a blueprint of the application is created, consider the final form look of the app.
3.Implementation: phase to start coding for the app.
4.Testing: verification phase after finishing the implementation to test the application.
5.Deployment: Deploy the application on servers to be hosted
6.Maintenance: the monitoring phase and any issues concerning it's performance is resolved.

Advantages of Waterfall methodology:
.Easy to use
.Cost effective
.Time saving
.Easy testing
.Suitable for small projects
.Managerial control

Disadvantages:
.Risky and uncertain
.Not suitable for complex projects
.Final product available only at the end
.Not suitable for projects with changing requirements
.Difficult to make changes in the testing phase

_Agile Model:
Focuses on process adaptability and customer satisfaction by rapid delivery of the working software product, it's a combination of iterative and incremental process models.Agile methods break the product into small incremental builds.


Agile stages: Analyze, Plan, Design, Build, Test, Review, Launch

Product backlog: Agile starts with product backlog which is all the demanded features by the business wants to get from the software development team.

Sprint planning: Leaders from the software development would look at the backlog and create priorities and decide what will be implemented in a given period.

These steps include the analyzing and planning.

The Advantages of Agile:
Dynamic response to requirements
Cost effective
Superior quality product
Direct communication between stakeholders
Best suited for large and long term projects
Minimum resource requirement

Disadvantages of Agile:
Poor documentation
Difficult to estimate time and effort for complex projects
Risky due to the ever evolving characteristics
Difficult to predict the expected results when requirements are unclear

Relationship between Agile and DevOps:
This relationship is fundemantally about satisfying the customers through early and continuous delivery of valuable software. Delivering working software frequently with preference to shorter timescale and the stakeholders and developers working together throughout the project.

Benefits of using Agile with DevOps:
Replace non-human steps using automation tools
Improve collaboration between team
Create automated deployment that moves code from the repo to testing and deployment with as human little interaction possible.


_DASA DevOps principles:
DASA(DevOps Agile Skills Association) define certain principles for DevOps:
Customer-centric Action: create with the end mind, end-to-end responsibility, cross-functional autonomous teams, continuous improvement and enabling automation for everything possible.

Principles:

.Customer-centric action: Short feedack loops with real customers and end users are essential nowadays and all activity in developing IT products and services revolves around these clients. To satisfy these customers needs, DevOps companies must operate like lean startups, constantly innovating, pivoting when a single approach isn't working, and investing in goods and services that would delight customers.

.Create with end in mind: focuses on identifying customer's true needs and working towards creating products and services that address those demands.

.End-to-end responsibility: team is responsible for the quality and quantity of services it provides to its clients

.Cross functional autonomous teams: teams must be completely self-contained throughout the product lifecycle.

.Continuous improvement: enhances the products and services offered to customers.

.Automation: associated with the goal of redefining how the team delivers its services.

_DevOps Lifecycle:
Continuous Development, Continuous Testing, Continuous Integration, Continuous Deployment, Continuous Monitoring

.Continuous Development: manifests planning(no tools required) and coding(several tools available for code maintenance)

.Continuous Testing: application is rigorously tested for bugs(automation testing tools such as TestNG, JUnit, Selenium) to enable QAs to properly test multiple code bases to ensure the functionality

.Continuous Integration: deals with software development, frequently changes are made to the source code.

.Continuous Deployment: implemented code is correctly deployed across all production servers(Puppet, ansible).

.Continuous Monitoring: includes all operational aspects, where critical information about the software's use is recorded and analyzed to derive analytics.(Nagios, Sensu, Grafana)

_DevOps Tools:

.Source code management is used to track modification to a source code repo, it tracks a running history of changes to a code base and helps resolve conflicts when merging updates from multiple contributors.(Git)

.Software Build: build automation tools Gradle and Maven

.Testing: phase required before deployment that validates that the products are production-grade and can be delivered to consumers(Selenium, JUnit, Appium)

.Integration: Jenkis and Bamboo 

.Continuous Deployment: Codeship, AWS CodeDeploy, Terraform, Ansible, Chef, Puppet.

.Monitoring: help in ensuring the product's correct functioning, detecting anomalies, and negating their effects before they bother the consumers.(Nagios and Splunk)

.Containerization: form of os virtualization in which applications runs in an isolated user space called containers(Docker, Kubernetes)

_Benefits of DevOps:
.Repetitive task is automated
.Drastic Improvement over quality
.Balanced working environment
.Assured Rapid Deployment
.Proactive Growth of the Business
.Continuous Delivery
.Minimal Cost of Production
.Higher Productivity

_DevSecOps:Development Security Operations emerged from DevOps to integrate the management of security throughout the development process.

Benefits of DevSecOps: 
.Rapid, cost-effective software delivery: Both time and costs can be reduced by minimizing the repetitive process of addressing security issues after delivery.
.Improved, proactive security: The cybersecurity process is involved in the development cycle.
.Accelerated security vulnerability patching: The restricts the threats during the development cycle
.Automation compatible with modern development: Automation can be adopted in cybersecurity testing.
.Repeatable and adaptive process: applied constantly across the environments, changing adaptive requirements to dynamic ones.

_DevOps on cloud: DevOps and cloud infrastructure helps in the software development life cycle and divided into three phases build, test, run
.Build:The cloud provides seamless access to build advanced applications
.Test: The cloud is cost-effective and the scope of production can be developed quickly for conducting the tests
.Run:The cloud provides high speed in developing operational environments that are scalable, flexible, and efficient of resources.

Benefits of cloud:
.Scalability
.Elasticity
.Availability
.Reliability
.Manageability
.Interoperability
.Accessibility
.Portability
.Performance
.Optimization

Cloud categories:
.IaaS(Infrastructure as a Service): instant computing infrastructure service that provides virtualized computing resources over the internet
.PaaS(Platform as a service): a method where users are allowed to build, test, debug, deploy, host and update their applications in the same environment
.SaaS(Software as a service): a method of delivering applications as a service, so that users are free from complex software and hardware management

